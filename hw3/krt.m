function [K,R,t]=krt(M)
% [K,R,t]=krt(M)
% KRT  Factorizse projective camera matrix in intrinsic and extrinsic 
% matrices as 
%                   M=K*[R;t] 
% The focal length is assumed positive.
%
% Raul Queiroz Feitosa - May/2010 (adapted from A. Fusiello, 1999)

%-------------------------------------------------------------------------
% "Kt" is the 4th row of M
%-------------------------------------------------------------------------
Kt= M(1:3,4);
%-------------------------------------------------------------------------

%-------------------------------------------------------------------------
% First estimates  K and R
%-------------------------------------------------------------------------
Q = inv(M(1:3, 1:3));
[invR,invK]=qr(Q);
K=inv(invK);
R=inv(invR);
%-------------------------------------------------------------------------

%-------------------------------------------------------------------------
% Guarantees that  K(3,3) is positive
%-------------------------------------------------------------------------
PlusMinus = sign(K(3,3));
K=PlusMinus*K;
Kt=PlusMinus*Kt;
%-------------------------------------------------------------------------

%-------------------------------------------------------------------------
% Tests focal lengths in K(1,1),K(2,2) are positive. If not, corrects them
%-------------------------------------------------------------------------
if K(1,1)<0
    E= [-1    0     0
         0    1     0
         0    0     1];
    K = K*E;
    R = E*R;
end
    
if K(2,2)<0
    E= [ 1    0     0
         0   -1     0
         0    0     1];
    K = K*E;
    R = E*R;
end 
%-------------------------------------------------------------------------
       
%-------------------------------------------------------------------------
% if R is not a rotation, fix the sign. This can possibly change the sign
% of the resulting matrix, which is defined up to a scale factor, however.
%-------------------------------------------------------------------------
if det(R)< 0
    R = -R;
    Kt= - Kt;
end
%-------------------------------------------------------------------------

%-------------------------------------------------------------------------
% sanity check
%-------------------------------------------------------------------------
if (norm(inv(Q)-K*R)>1e-10) && (norm(inv(Q)+K*R)>1e-10) 
    error('Something wrong with the QR factorization.'); 
end
%-------------------------------------------------------------------------

%-------------------------------------------------------------------------
% Computes the Origin of world frame and sets K(3,3)to 1
%-------------------------------------------------------------------------
t = inv(K)*Kt;
K = K./K(3,3);

%-------------------------------------------------------------------------
% sanity check
%-------------------------------------------------------------------------
if det(R) < 0 error('R is not a rotation matrix'); end
if K(3,3) < 0 error('Wrong sign of K(3,3)'); end
%-------------------------------------------------------------------------

%-------------------------------------------------------------------------
% this guarantee that the result *is* a factorization of the given P, up to a scale factor
%-------------------------------------------------------------------------
W = K*[R t];
if (rank([M(:)  W(:)]) ~= 1 )
    error('Something wrong with the KRT factorization.'); 
end
%-------------------------------------------------------------------------

return

